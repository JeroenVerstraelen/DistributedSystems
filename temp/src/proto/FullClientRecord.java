/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FullClientRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FullClientRecord\",\"namespace\":\"proto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"IPaddress\",\"type\":\"string\"},{\"name\":\"portNumber\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"inHouse\",\"type\":\"boolean\"},{\"name\":\"previousLight\",\"type\":\"boolean\"},{\"name\":\"temperatureArray\",\"type\":{\"type\":\"array\",\"items\":\"float\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence IPaddress;
  @Deprecated public int portNumber;
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public boolean inHouse;
  @Deprecated public boolean previousLight;
  @Deprecated public java.util.List<java.lang.Float> temperatureArray;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public FullClientRecord() {}

  /**
   * All-args constructor.
   */
  public FullClientRecord(java.lang.Integer id, java.lang.CharSequence IPaddress, java.lang.Integer portNumber, java.lang.CharSequence type, java.lang.Boolean inHouse, java.lang.Boolean previousLight, java.util.List<java.lang.Float> temperatureArray) {
    this.id = id;
    this.IPaddress = IPaddress;
    this.portNumber = portNumber;
    this.type = type;
    this.inHouse = inHouse;
    this.previousLight = previousLight;
    this.temperatureArray = temperatureArray;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return IPaddress;
    case 2: return portNumber;
    case 3: return type;
    case 4: return inHouse;
    case 5: return previousLight;
    case 6: return temperatureArray;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: IPaddress = (java.lang.CharSequence)value$; break;
    case 2: portNumber = (java.lang.Integer)value$; break;
    case 3: type = (java.lang.CharSequence)value$; break;
    case 4: inHouse = (java.lang.Boolean)value$; break;
    case 5: previousLight = (java.lang.Boolean)value$; break;
    case 6: temperatureArray = (java.util.List<java.lang.Float>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'IPaddress' field.
   */
  public java.lang.CharSequence getIPaddress() {
    return IPaddress;
  }

  /**
   * Sets the value of the 'IPaddress' field.
   * @param value the value to set.
   */
  public void setIPaddress(java.lang.CharSequence value) {
    this.IPaddress = value;
  }

  /**
   * Gets the value of the 'portNumber' field.
   */
  public java.lang.Integer getPortNumber() {
    return portNumber;
  }

  /**
   * Sets the value of the 'portNumber' field.
   * @param value the value to set.
   */
  public void setPortNumber(java.lang.Integer value) {
    this.portNumber = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'inHouse' field.
   */
  public java.lang.Boolean getInHouse() {
    return inHouse;
  }

  /**
   * Sets the value of the 'inHouse' field.
   * @param value the value to set.
   */
  public void setInHouse(java.lang.Boolean value) {
    this.inHouse = value;
  }

  /**
   * Gets the value of the 'previousLight' field.
   */
  public java.lang.Boolean getPreviousLight() {
    return previousLight;
  }

  /**
   * Sets the value of the 'previousLight' field.
   * @param value the value to set.
   */
  public void setPreviousLight(java.lang.Boolean value) {
    this.previousLight = value;
  }

  /**
   * Gets the value of the 'temperatureArray' field.
   */
  public java.util.List<java.lang.Float> getTemperatureArray() {
    return temperatureArray;
  }

  /**
   * Sets the value of the 'temperatureArray' field.
   * @param value the value to set.
   */
  public void setTemperatureArray(java.util.List<java.lang.Float> value) {
    this.temperatureArray = value;
  }

  /** Creates a new FullClientRecord RecordBuilder */
  public static proto.FullClientRecord.Builder newBuilder() {
    return new proto.FullClientRecord.Builder();
  }
  
  /** Creates a new FullClientRecord RecordBuilder by copying an existing Builder */
  public static proto.FullClientRecord.Builder newBuilder(proto.FullClientRecord.Builder other) {
    return new proto.FullClientRecord.Builder(other);
  }
  
  /** Creates a new FullClientRecord RecordBuilder by copying an existing FullClientRecord instance */
  public static proto.FullClientRecord.Builder newBuilder(proto.FullClientRecord other) {
    return new proto.FullClientRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for FullClientRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FullClientRecord>
    implements org.apache.avro.data.RecordBuilder<FullClientRecord> {

    private int id;
    private java.lang.CharSequence IPaddress;
    private int portNumber;
    private java.lang.CharSequence type;
    private boolean inHouse;
    private boolean previousLight;
    private java.util.List<java.lang.Float> temperatureArray;

    /** Creates a new Builder */
    private Builder() {
      super(proto.FullClientRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(proto.FullClientRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IPaddress)) {
        this.IPaddress = data().deepCopy(fields()[1].schema(), other.IPaddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.portNumber)) {
        this.portNumber = data().deepCopy(fields()[2].schema(), other.portNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.inHouse)) {
        this.inHouse = data().deepCopy(fields()[4].schema(), other.inHouse);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.previousLight)) {
        this.previousLight = data().deepCopy(fields()[5].schema(), other.previousLight);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.temperatureArray)) {
        this.temperatureArray = data().deepCopy(fields()[6].schema(), other.temperatureArray);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FullClientRecord instance */
    private Builder(proto.FullClientRecord other) {
            super(proto.FullClientRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IPaddress)) {
        this.IPaddress = data().deepCopy(fields()[1].schema(), other.IPaddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.portNumber)) {
        this.portNumber = data().deepCopy(fields()[2].schema(), other.portNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.inHouse)) {
        this.inHouse = data().deepCopy(fields()[4].schema(), other.inHouse);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.previousLight)) {
        this.previousLight = data().deepCopy(fields()[5].schema(), other.previousLight);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.temperatureArray)) {
        this.temperatureArray = data().deepCopy(fields()[6].schema(), other.temperatureArray);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public proto.FullClientRecord.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public proto.FullClientRecord.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'IPaddress' field */
    public java.lang.CharSequence getIPaddress() {
      return IPaddress;
    }
    
    /** Sets the value of the 'IPaddress' field */
    public proto.FullClientRecord.Builder setIPaddress(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.IPaddress = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'IPaddress' field has been set */
    public boolean hasIPaddress() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'IPaddress' field */
    public proto.FullClientRecord.Builder clearIPaddress() {
      IPaddress = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'portNumber' field */
    public java.lang.Integer getPortNumber() {
      return portNumber;
    }
    
    /** Sets the value of the 'portNumber' field */
    public proto.FullClientRecord.Builder setPortNumber(int value) {
      validate(fields()[2], value);
      this.portNumber = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'portNumber' field has been set */
    public boolean hasPortNumber() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'portNumber' field */
    public proto.FullClientRecord.Builder clearPortNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.CharSequence getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public proto.FullClientRecord.Builder setType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'type' field */
    public proto.FullClientRecord.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'inHouse' field */
    public java.lang.Boolean getInHouse() {
      return inHouse;
    }
    
    /** Sets the value of the 'inHouse' field */
    public proto.FullClientRecord.Builder setInHouse(boolean value) {
      validate(fields()[4], value);
      this.inHouse = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'inHouse' field has been set */
    public boolean hasInHouse() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'inHouse' field */
    public proto.FullClientRecord.Builder clearInHouse() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'previousLight' field */
    public java.lang.Boolean getPreviousLight() {
      return previousLight;
    }
    
    /** Sets the value of the 'previousLight' field */
    public proto.FullClientRecord.Builder setPreviousLight(boolean value) {
      validate(fields()[5], value);
      this.previousLight = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'previousLight' field has been set */
    public boolean hasPreviousLight() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'previousLight' field */
    public proto.FullClientRecord.Builder clearPreviousLight() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'temperatureArray' field */
    public java.util.List<java.lang.Float> getTemperatureArray() {
      return temperatureArray;
    }
    
    /** Sets the value of the 'temperatureArray' field */
    public proto.FullClientRecord.Builder setTemperatureArray(java.util.List<java.lang.Float> value) {
      validate(fields()[6], value);
      this.temperatureArray = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'temperatureArray' field has been set */
    public boolean hasTemperatureArray() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'temperatureArray' field */
    public proto.FullClientRecord.Builder clearTemperatureArray() {
      temperatureArray = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public FullClientRecord build() {
      try {
        FullClientRecord record = new FullClientRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.IPaddress = fieldSetFlags()[1] ? this.IPaddress : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.portNumber = fieldSetFlags()[2] ? this.portNumber : (java.lang.Integer) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.inHouse = fieldSetFlags()[4] ? this.inHouse : (java.lang.Boolean) defaultValue(fields()[4]);
        record.previousLight = fieldSetFlags()[5] ? this.previousLight : (java.lang.Boolean) defaultValue(fields()[5]);
        record.temperatureArray = fieldSetFlags()[6] ? this.temperatureArray : (java.util.List<java.lang.Float>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
