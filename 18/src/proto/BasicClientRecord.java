/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BasicClientRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BasicClientRecord\",\"namespace\":\"proto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"IPaddress\",\"type\":\"string\"},{\"name\":\"portNumber\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence IPaddress;
  @Deprecated public int portNumber;
  @Deprecated public java.lang.CharSequence type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public BasicClientRecord() {}

  /**
   * All-args constructor.
   */
  public BasicClientRecord(java.lang.Integer id, java.lang.CharSequence IPaddress, java.lang.Integer portNumber, java.lang.CharSequence type) {
    this.id = id;
    this.IPaddress = IPaddress;
    this.portNumber = portNumber;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return IPaddress;
    case 2: return portNumber;
    case 3: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: IPaddress = (java.lang.CharSequence)value$; break;
    case 2: portNumber = (java.lang.Integer)value$; break;
    case 3: type = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'IPaddress' field.
   */
  public java.lang.CharSequence getIPaddress() {
    return IPaddress;
  }

  /**
   * Sets the value of the 'IPaddress' field.
   * @param value the value to set.
   */
  public void setIPaddress(java.lang.CharSequence value) {
    this.IPaddress = value;
  }

  /**
   * Gets the value of the 'portNumber' field.
   */
  public java.lang.Integer getPortNumber() {
    return portNumber;
  }

  /**
   * Sets the value of the 'portNumber' field.
   * @param value the value to set.
   */
  public void setPortNumber(java.lang.Integer value) {
    this.portNumber = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /** Creates a new BasicClientRecord RecordBuilder */
  public static proto.BasicClientRecord.Builder newBuilder() {
    return new proto.BasicClientRecord.Builder();
  }
  
  /** Creates a new BasicClientRecord RecordBuilder by copying an existing Builder */
  public static proto.BasicClientRecord.Builder newBuilder(proto.BasicClientRecord.Builder other) {
    return new proto.BasicClientRecord.Builder(other);
  }
  
  /** Creates a new BasicClientRecord RecordBuilder by copying an existing BasicClientRecord instance */
  public static proto.BasicClientRecord.Builder newBuilder(proto.BasicClientRecord other) {
    return new proto.BasicClientRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for BasicClientRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BasicClientRecord>
    implements org.apache.avro.data.RecordBuilder<BasicClientRecord> {

    private int id;
    private java.lang.CharSequence IPaddress;
    private int portNumber;
    private java.lang.CharSequence type;

    /** Creates a new Builder */
    private Builder() {
      super(proto.BasicClientRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(proto.BasicClientRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IPaddress)) {
        this.IPaddress = data().deepCopy(fields()[1].schema(), other.IPaddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.portNumber)) {
        this.portNumber = data().deepCopy(fields()[2].schema(), other.portNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing BasicClientRecord instance */
    private Builder(proto.BasicClientRecord other) {
            super(proto.BasicClientRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IPaddress)) {
        this.IPaddress = data().deepCopy(fields()[1].schema(), other.IPaddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.portNumber)) {
        this.portNumber = data().deepCopy(fields()[2].schema(), other.portNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public proto.BasicClientRecord.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public proto.BasicClientRecord.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'IPaddress' field */
    public java.lang.CharSequence getIPaddress() {
      return IPaddress;
    }
    
    /** Sets the value of the 'IPaddress' field */
    public proto.BasicClientRecord.Builder setIPaddress(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.IPaddress = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'IPaddress' field has been set */
    public boolean hasIPaddress() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'IPaddress' field */
    public proto.BasicClientRecord.Builder clearIPaddress() {
      IPaddress = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'portNumber' field */
    public java.lang.Integer getPortNumber() {
      return portNumber;
    }
    
    /** Sets the value of the 'portNumber' field */
    public proto.BasicClientRecord.Builder setPortNumber(int value) {
      validate(fields()[2], value);
      this.portNumber = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'portNumber' field has been set */
    public boolean hasPortNumber() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'portNumber' field */
    public proto.BasicClientRecord.Builder clearPortNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.CharSequence getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public proto.BasicClientRecord.Builder setType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'type' field */
    public proto.BasicClientRecord.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public BasicClientRecord build() {
      try {
        BasicClientRecord record = new BasicClientRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.IPaddress = fieldSetFlags()[1] ? this.IPaddress : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.portNumber = fieldSetFlags()[2] ? this.portNumber : (java.lang.Integer) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
